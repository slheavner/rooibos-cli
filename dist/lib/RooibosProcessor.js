"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RooibosProcessor = void 0;
const path = require("path");
const CodeCoverageProcessor_1 = require("./CodeCoverageProcessor");
const Feedback_1 = require("./Feedback");
const File_1 = require("./File");
const FunctionMap_1 = require("./FunctionMap");
const RuntimeConfig_1 = require("./RuntimeConfig");
const pkg = require('../../package.json');
class RooibosProcessor {
    constructor(config) {
        this._config = config;
        console.log('Running project processor');
        if (!config.projectPath) {
            throw new Error('Config does not contain projectPath property');
        }
        if (!config.sourceFilePattern && config.isRecordingCodeCoverage) {
            throw new Error('Config does not contain sourceFilePattern regex\'s, ' +
                'which are required when recording code coverage');
        }
        if (!config.testsFilePattern) {
            throw new Error('Config does not contain testsFilePattern regex\'s');
        }
    }
    get config() {
        return this._config;
    }
    processFiles() {
        console.log(`Running processor at path ${this.config.projectPath} `);
        let outputText = this.createFileHeaderText();
        let functionMap = new FunctionMap_1.default();
        console.log(`Adding runtimeConfig `);
        this.runtimeConfig = new RuntimeConfig_1.RuntimeConfig(functionMap, this.config);
        this.runtimeConfig.process();
        console.log(`Adding function map `);
        outputText += '\n' + functionMap.getFunctionMapText();
        console.log(`Adding runtime config function `);
        outputText += '\n' + this.getRuntimeConfigText();
        console.log(`Adding version function `);
        outputText += '\n' + this.getVersionText();
        outputText += '\n' + this.createTestsHeaderText();
        outputText += '\n' + this.runtimeConfig.createTestSuiteLookupFunction();
        outputText += '\n' + this.runtimeConfig.createIgnoredTestsInfoFunction();
        outputText += '\n' + this.createFileFooterText();
        let mapFileName = path.join(this.config.projectPath, this.config.outputPath, 'rooibosFunctionMap.brs');
        const file = new File_1.default(path.resolve(path.dirname(mapFileName)), path.dirname(mapFileName), path.basename(mapFileName), '.brs');
        file.setFileContents(outputText);
        console.log(`Writing to ${file.fullPath}`);
        file.saveFileContents();
        if (this.config.isRecordingCodeCoverage) {
            console.log(`this is a code coverage build. Adding code coverage calls`);
            let coverageProcessor = new CodeCoverageProcessor_1.CodeCoverageProcessor(this.config);
            coverageProcessor.process();
        }
        else {
            console.log(`this is NOT a code coverage build.`);
        }
        this.reportErrors();
        this.reportWarnings();
        if (Feedback_1.getFeedbackErrors().length > 0) {
            throw new Error('rooibos-cli failed to parse tests due to reported errors');
        }
    }
    reportErrors() {
        if (Feedback_1.getFeedbackErrors().length > 0) {
            console.log(`
    The following errors occurred during processing:

    ======
    `);
            Feedback_1.getFeedbackErrors().forEach((errorText) => console.log(`[ERROR] ${errorText}`));
            console.log(`
    ======
    `);
        }
    }
    reportWarnings() {
        if (Feedback_1.getFeedbackWarnings().length > 0) {
            console.log(`
    The following warnings occurred during processing:

    ======
    `);
            Feedback_1.getFeedbackWarnings().forEach((errorText) => console.log(`[WARN] ${errorText}`));
            console.log(`
    ======
    `);
        }
    }
    createFileHeaderText() {
        return `
    '***************************************************
    ' This file is generated by rooibos. DO NOT EDIT. RTM please :)
    ' ***************************************************
    `;
    }
    createFileFooterText() {
        return `

    '***************************************************
    ' This file is generated by rooibos. DO NOT EDIT. RTM please :)
    ' ***************************************************
    `;
    }
    createTestsHeaderText() {
        return `
    '***************************************************
    ' Unit test suites defitintions
    '***************************************************
    `;
    }
    getRuntimeConfigText() {
        return `

    function RBSFM_getRuntimeConfig()
        return {
          "failFast": ${this.config.failFast}
          "logLevel": ${this.config.logLevel}
          "showOnlyFailures": ${this.config.showFailuresOnly}
          "printLcov": ${this.config.printLcov === true}
          "rooibosPreprocessorVersion": "${pkg.version}"
          "port": ${this.config.port || 'Invalid'}
          }
    end function
    `;
    }
    getVersionText() {
        return `
    function RBSFM_getPreprocessorVersion()
        return "${pkg.version}"
    end function
    `;
    }
}
exports.RooibosProcessor = RooibosProcessor;
